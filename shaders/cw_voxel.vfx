//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	DevShader = true;
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Voxel";
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
	#include "common/features.hlsl"
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
MODES
{
	VrForward();
	Depth( S_MODE_DEPTH );
	ToolsVis( S_MODE_TOOLS_VIS );
	ToolsWireframe( S_MODE_TOOLS_WIREFRAME );
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" );
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"

	float g_flVoxelSize < Default( 32.0 ); >;
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"

	uint vData : TEXCOORD10 < Semantic( None ); >;
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"
	float2 vTexCoord : TEXCOORD9;
	uint nTextureIndex : TEXCOORD10;
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	

	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VertexInput i ) )
	{
		float3 position = float3( float( i.vData & ( 63 ) ), float( ( i.vData >> 6 ) & ( 63 ) ), float( ( i.vData >> 12 ) & ( 63 ) ) ) * g_flVoxelSize;
		int texindex = int( ( i.vData >> 18 ) & ( 31 ) );
		int normal = int( ( i.vData >> 27 ) & ( 7 ) );

		i.vPositionOs = position;

		float3 vNormalOs = float3( 0, 0, 1 );
		if ( normal == 1 ) vNormalOs = float3( 0, 0, -1 );
		else if ( normal == 2 ) vNormalOs = float3( 0, -1, 0 );
		else if ( normal == 3 ) vNormalOs = float3( 0, 1, 0 );
		else if ( normal == 4 ) vNormalOs = float3( -1, 0, 0 );
		else if ( normal == 5 ) vNormalOs = float3( 1, 0, 0 );

		float3 vTangentOs = float3( 1, 0, 0 );
		if ( normal == 1 ) vTangentOs = float3( 1, 0, 0 );
		else if ( normal == 2 ) vTangentOs = float3( 0, 0, -1 );
		else if ( normal == 3 ) vTangentOs = float3( 0, 0, -1 );
		else if ( normal == 4 ) vTangentOs = float3( 0, 0, -1 );
		else if ( normal == 5 ) vTangentOs = float3( 0, 0, -1 );

		float3 vBinormalOs = cross( vNormalOs, vTangentOs );
		float2 vTexCoord = float2( dot( vBinormalOs, position ), dot( vTangentOs, position ) );

		PixelInput o = ProcessVertex( i );
		o.vNormalWs = vNormalOs;
		o.vTangentUWs = vBinormalOs;
		o.vTangentVWs = vTangentOs;
		o.vTexCoord = vTexCoord;
		o.nTextureIndex = texindex;
		return FinalizeVertex( o );
	}
}

//=========================================================================================================================

PS
{
	float flTextureAtlasCellSize< Default(64.0f); >;
	StaticCombo( S_MODE_DEPTH, 0..1, Sys( ALL ) );
	StaticCombo( S_MODE_TOOLS_WIREFRAME, 0..1, Sys( ALL ) );

	#if ( S_MODE_TOOLS_WIREFRAME )
		RenderState( FillMode, WIREFRAME );
		RenderState( SlopeScaleDepthBias, -0.5 );
		RenderState( DepthBiasClamp, -0.0005 );
		RenderState( DepthWriteEnable, false );
		#define DEPTH_STATE_ALREADY_SET
	#endif

	#include "common/pixel.hlsl"

	CreateInputTexture2D( TextureAtlas, Srgb, 8, "", "_color", "Voxel Atlas,10/10", Default3( 1.0f, 1.0f, 1.0f ) );
	CreateTexture2DWithoutSampler( g_tAtlasColor )  < Channel( RGB,  Box( TextureAtlas ), Srgb ); OutputFormat( BC7 ); SrgbRead( true ); >;

	PixelOutput MainPs( PixelInput i )
	{
		#if ( S_MODE_DEPTH )
		{
			PixelOutput o;
			o.vColor.rgba = float4( 0.0, 0.0, 0.0, 1.0 );
			return o;
		}
		#elif ( S_MODE_TOOLS_WIREFRAME )
		{
			PixelOutput o;
			o.vColor.rgba = float4( g_vWireframeColor.rgb, 1 );
			return o;
		}
		#else
		{

			float2 vAtlasDims = TextureDimensions2D( g_tAtlasColor, 0 ).xy;
			float2 vAltasMaxCells = vAtlasDims / flTextureAtlasCellSize;
			float2 vInvMaxCells = 1.0f / vAltasMaxCells;

			float2 vCellLocation =  float2( i.nTextureIndex % vAltasMaxCells.x, floor( i.nTextureIndex / vAltasMaxCells.x ) );

			// Normalized to Atlas Space
			float2 vTexCoordAtlas = frac((i.vTexCoord.xy % g_flVoxelSize) / g_flVoxelSize);
			vTexCoordAtlas = frac((vTexCoordAtlas / vAltasMaxCells) + (vCellLocation * vInvMaxCells));

			Material m = GatherMaterial( i );
			m.Albedo.rgb = Tex2DLevelS( g_tAtlasColor, TextureFiltering, vTexCoordAtlas, 0 ).rgb;

			return FinalizePixelMaterial( i, m );
		}
		#endif
	}
}