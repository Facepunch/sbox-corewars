@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;
@using System.Linq;

@namespace Facepunch.CoreWars.UI
@attribute [StyleSheet( "/ui/TeamItem.scss" )]
@inherits Panel

<root>
    <div @ref="Header" class="header">
        <label>Player</label>
        <label>Kills</label>
        <div @ref="Core" class="core"></div>
    </div>

    <div @ref="Players" class="players">
    </div>
</root>

@code
{
    public class TeamPlayerItem : Panel
    {
        public CoreWars.Player Player { get; set; }
        public Label Name { get; private set; }
        public Label Kills { get; private set; }
        public Label Spacer { get; private set; }

        public void Update( CoreWars.Player player )
        {
            Player = player;

            DeleteChildren( true );

            Name = Add.Label( player.Client.Name, "name" );
            Kills = Add.Label( "0", "kills" );
            Spacer = Add.Label( "" );
        }

        public override void Tick()
        {
            if ( !Player.IsValid() )
            {
                if ( !IsDeleting )
                {
                    Delete();
                    return;
                }
            }

            Kills.Text = Player.Client.GetInt( "kills " ).ToString();

            base.Tick();
        }
    }

    private Panel Header { get; set; }
    private Panel Players { get; set; }
    private Panel Core { get; set; }

    public TeamCore Entity { get; set; }

    private bool IsHidden()
    {
        return Entity.Team.GetPlayers().Count() == 0;
    }

    private bool IsDestroyed()
    {
        return Entity.LifeState == LifeState.Dead;
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        base.OnAfterTreeRender( firstTime );

        if ( Entity.IsValid() )
        {
            Header.Style.BackgroundColor = Entity.Team.GetColor();

            var players = Entity.Team.GetPlayers();
            Players.DeleteChildren( true );

            foreach ( var player in players )
            {
                if ( player.Client.IsValid() )
                {
                    var item = Players.AddChild<TeamPlayerItem>( "player" );
                    item.Update( player );
                }
            }
        }

        SetClass( "hidden", IsHidden() );
        SetClass( "destroyed", IsDestroyed() );

        BindClass( "hidden", IsHidden );
        BindClass( "destroyed", IsDestroyed );
    }

    protected override int BuildHash()
    {
        var players = Entity.Team.GetPlayers();
        return HashCode.Combine( Entity, players.Count() );
    }
}
