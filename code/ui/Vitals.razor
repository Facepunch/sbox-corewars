@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Facepunch.CoreWars.Utility;
@using Sandbox.UI.Construct;
@using System.Collections.Generic;
@using System.Linq;

@namespace Facepunch.CoreWars.UI
@attribute [StyleSheet( "/ui/Vitals.scss" )]
@inherits Panel

@if ( !CoreWars.Player.Me.IsValid() ) return;

@{
    var player = CoreWars.Player.Me;
}

<root>
    <div class="player-vitals">
        <div class="player-buffs">
            @foreach ( var buff in player.Buffs )
            {
                <BuffIcon class="buff" Buff=@buff></BuffIcon>
            }
        </div>
        <div class="vital health">
            <icon class="icon">favorite</icon>
            <div class="bar-wrapper">
                <div style="width: @(player.Health.CeilToInt())%;" class="bar @(player.Health <= 15f ? "health-low" : "")">
                </div>
            </div>
            <div class="value-wrapper">
                <text class="value">@(player.Health.CeilToInt())%</text>
            </div>
        </div>

        <div class="vital stamina">
            <icon class="icon">bolt</icon>
            <div class="bar-wrapper">
                <div style="width: @(player.Stamina.CeilToInt())%;" class="bar @(player.Stamina <= 15f ? "stamina-low" : "")">
                </div>
            </div>
            <div class="value-wrapper">
                <text class="value">@(player.Stamina.CeilToInt())%</text>
            </div>
        </div>
    </div>
</root>

@code
{
    public class BuffIcon : Panel
    {
        public BaseBuff Buff { get; set; }
        public Panel Icon { get; private set; }
        public Panel Timer { get; private set; }

        public BuffIcon()
        {
            Icon = Add.Panel( "icon" );
            Timer = Add.Panel( "timer" );
        }

        public override void Tick()
        {
            Timer.Style.Height = Length.Fraction( 1f - ( Buff.TimeUntilExpired / Buff.Duration ) );
            base.Tick();
        }

        protected override void OnParametersSet()
        {
            Style.SetLinearGradientBackground( Buff.Color, 0.5f, new Color( 0.2f ), 0.5f );
            Icon.Style.SetBackgroundImage( Buff.Icon );

            base.OnParametersSet();
        }
    }

    public static Vitals Current { get; private set; }

    public Vitals()
    {
        Current = this;
    }

    protected override void OnParametersSet()
    {
        BindClass( "hidden", IsHidden );

        base.OnParametersSet();
    }

    protected override int BuildHash()
    {
        var player = CoreWars.Player.Me;
        if ( !player.IsValid() ) return 0;

        return HashCode.Combine( player.Stamina.CeilToInt(), player.IsOutOfBreath, player.Health.CeilToInt(), player.Buffs?.Count ?? 0 );
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        base.OnAfterTreeRender( firstTime );
	}

	private bool IsHidden()
	{
		if ( Local.Pawn.LifeState == LifeState.Dead )
			return true;

		if ( IDialog.IsActive() || !Game.IsState<GameState>() )
			return true;

		return false;
	}
}
