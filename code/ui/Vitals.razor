@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Facepunch.CoreWars.Utility;
@using Sandbox.UI.Construct;
@using System.Collections.Generic;
@using System.Linq;

@namespace Facepunch.CoreWars.UI
@attribute [StyleSheet( "/ui/Vitals.scss" )]
@inherits Panel

<root>
    <div class="player-vitals">
        <div @ref="BuffsContainer" class="player-buffs"></div>
        <div class="vital health">
            <icon class="icon">favorite</icon>
            <div class="bar-wrapper">
                <div @ref="HealthBar" class="bar">
                    <div class="mdi mdi-name"></div>
                </div>
                <label class="value" @ref="HealthValue"></label>
            </div>
        </div>

        <div class="vital stamina">
            <icon class="icon">bolt</icon>
            <div class="bar-wrapper">
                <div @ref="StaminaBar" class="bar">
                </div>
                <label class="value" @ref="StaminaValue"></label>
            </div>
        </div>
    </div>
</root>

@code
{
	public class BuffIcon : Panel
	{
		public BaseBuff Buff { get; private set; }
		public Panel Icon { get; private set; }
		public Panel Timer { get; private set; }

		public BuffIcon()
		{
			Icon = Add.Panel( "icon" );
			Timer = Add.Panel( "timer" );
		}

		public void SetBuff( BaseBuff buff )
		{
			Style.SetLinearGradientBackground( buff.Color, 0.5f, new Color( 0.2f ), 0.5f );
			Icon.Style.SetBackgroundImage( buff.Icon );
			Buff = buff;
		}

		public override void Tick()
		{
			Timer.Style.Height = Length.Fraction( 1f - ( Buff.TimeUntilExpired / Buff.Duration ) );
			base.Tick();
		}
	}

	public static Vitals Current { get; private set; }

	public Panel HealthBar { get; set; }
	public Panel StaminaBar { get; set; }

	public Label HealthValue { get; set; }
	public Label StaminaValue { get; set; }

	public Panel BuffsContainer { get; set; }

	public List<BuffIcon> Icons { get; set; } = new();

	public static void AddBuff( BaseBuff buff )
	{
		Current?.InternalAddBuff( buff );
	}

	public static void RemoveBuff( BaseBuff buff )
	{
		Current?.InternalRemoveBuff( buff );
	}

	public Vitals()
	{
		Current = this;
	}

	public override void Tick()
	{
		if ( Local.Pawn is CoreWars.Player player )
		{
			HealthBar.Style.Width = Length.Fraction( player.Health / 100f );
			HealthBar.SetClass( "health-low", player.Health <= 15f );

			HealthValue.Text = $"{player.Health.CeilToInt()}%";
			StaminaValue.Text = $"{player.Stamina.CeilToInt()}%";

			StaminaBar.Style.Width = Length.Fraction( player.Stamina / 100f );
			StaminaBar.SetClass( "stamina-low", player.IsOutOfBreath );
		}

		base.Tick();
	}

	protected override void PostTemplateApplied()
	{
        if ( Local.Pawn is not CoreWars.Player player )
			return;

		BindClass( "hidden", IsHidden );

		base.PostTemplateApplied();
	}

	private void InternalAddBuff( BaseBuff buff )
	{
		var icon = BuffsContainer.AddChild<BuffIcon>( "buff" );
		icon.SetBuff( buff );
		Icons.Add( icon );
	}

	private void InternalRemoveBuff( BaseBuff buff )
	{
		var icon = Icons.Find( i => i.Buff == buff );

		if ( icon != null )
		{
			Icons.Remove( icon );
			icon.Delete();
		}
	}

	private bool IsHidden()
	{
		if ( Local.Pawn.LifeState == LifeState.Dead )
			return true;

		if ( IDialog.IsActive() || !Game.IsState<GameState>() )
			return true;

		return false;
	}
}
