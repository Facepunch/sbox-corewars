@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;
@using System.Collections.Generic;
@using System.Linq;

@namespace Facepunch.CoreWars.UI
@attribute [StyleSheet( "/ui/WinSummary.scss" )]
@inherits Panel
@implements IDialog

<root>
    <div class="modal">
        <div class="header">
            <label class="title">END OF ROUND</label>
            <label @ref="WinningTeamPanel" class="winner">@WinningTeam.ToString().ToUpper() TEAM WINS</label>
        </div>
        <div class="stats">
            <div class="container">
                <div class="left">
                    <div class="icon"></div>
                    <label class="title">MOST KILLS</label>
                </div>
                <div class="right">
                    <div class="players">
                        @for ( var i = 0; i < 4; i++ )
                        {
                            if ( MostKillsList is not null && MostKillsList.Count > i )
                            {
                                var client = MostKillsList[i];

                                <div class="player">
                                    <div class="avatar" style="background-image: url( avatar:@(client.SteamId) )"></div>
                                    <label class="username">@client.Name</label>
                                    <label class="score">@client.GetInt( "kills" )</label>
                                </div>
                            }
                            else
                            {
                                <div class="player">
                                    <div class="avatar"></div>
                                    <label class="username"></label>
                                    <label class="score"></label>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>

            <div class="container">
                <div class="left">
                    <div class="icon"></div>
                    <label class="title">CORES DESTROYED</label>
                </div>
                <div class="right">
                    <div class="players">
                        @for ( var i = 0; i < 4; i++ )
                        {
                            if ( CoresDestroyedList is not null && CoresDestroyedList.Count > i )
                            {
                                var client = CoresDestroyedList[i];

                                <div class="player">
                                    <div class="avatar" style="background-image: url( avatar:@(client.SteamId) )"></div>
                                    <label class="username">@client.Name</label>
                                    <label class="score">@client.GetInt( "cores" )</label>
                                </div>
                            }
                            else
                            {
                                <div class="player">
                                    <div class="avatar"></div>
                                    <label class="username"></label>
                                    <label class="score"></label>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="next-round">
            <label class="title">N E X T   R O U N D</label>
            <div class="countdown">
                <label class="value">@NextRoundTime</label>
            </div>
        </div>
    </div>
</root>

@code
{
    public static WinSummary Current { get; private set; }

    public List<Client> CoresDestroyedList { get; private set; }
    public List<Client> MostKillsList { get; private set; }
    public string NextRoundTime => Math.Max( TimeUntilNextRound.Relative.CeilToInt(), 0 ).ToString();
    public Panel WinningTeamPanel { get; private set; }
    public Team WinningTeam { get; private set; }
    public bool IsOpen { get; set; }

    private RealTimeUntil TimeUntilNextRound { get; set; }

    public WinSummary()
    {
        Current = this;
    }

    public void Open()
    {
        if ( IsOpen ) return;
        PlaySound( "itemstore.open" );
        IDialog.Activate( this );
        IsOpen = true;
    }

    public void Close()
    {
        if ( !IsOpen ) return;
        IDialog.Deactivate( this );
        IsOpen = false;
    }

    public void Populate( RealTimeUntil nextRoundTime, Team winningTeam )
    {
        TimeUntilNextRound = nextRoundTime;
        WinningTeam = winningTeam;

        var allValidClients = Client.All.Where( c => c.Pawn is CoreWarsPlayer player && player.Team != Team.None );

        MostKillsList = allValidClients
        .OrderBy( a => a.GetInt( "kills" ) )
        .ToList();

        CoresDestroyedList = allValidClients
        .OrderBy( a => a.GetInt( "cores" ) )
        .ToList();
    }

    protected override void OnParametersSet()
    {
        BindClass( "hidden", () => !IsOpen );

        base.OnParametersSet();
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        WinningTeamPanel.Style.FontColor = WinningTeam.GetColor();
        base.OnAfterTreeRender( firstTime );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( MostKillsList, CoresDestroyedList, WinningTeam, TimeUntilNextRound );
    }
}
