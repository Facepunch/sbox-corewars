@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;
@using System.Collections.Generic;
@using System.Linq;

@namespace Facepunch.CoreWars.UI
@attribute [StyleSheet( "/ui/WinSummary.scss" )]
@inherits Panel
@implements IDialog

<root>
    <div class="modal">
        <div class="header">
            <label class="title">END OF ROUND</label>
            <label @ref="WinningTeam" class="winner">WINNING TEAM</label>
        </div>
        <div class="stats">
            <div class="container">
                <div class="left">
                    <div class="icon"></div>
                    <label class="title">MOST KILLS</label>
                </div>
                <div class="right">
                    <div @ref="MostKillsList" class="players"></div>
                </div>
            </div>

            <div class="container">
                <div class="left">
                    <div class="icon"></div>
                    <label class="title">CORES DESTROYED</label>
                </div>
                <div class="right">
                    <div @ref="CoresDestroyedList" class="players"></div>
                </div>
            </div>
        </div>
        <div class="next-round">
            <label class="title">N E X T   R O U N D</label>
            <div class="countdown">
                <label @text="NextRoundTime" class="value">0</label>
            </div>
        </div>
    </div>
</root>

@code
{
	public static WinSummary Current { get; private set; }

	public Panel CoresDestroyedList { get; private set; }
	public Panel MostKillsList { get; private set; }
	public string NextRoundTime => Math.Max( TimeUntilNextRound.Relative.CeilToInt(), 0 ).ToString();
	public Label WinningTeam { get; private set; }
	public bool IsOpen { get; set; }

	private RealTimeUntil TimeUntilNextRound { get; set; }

	public WinSummary()
	{
		Current = this;
	}

	public void Open()
	{
		if ( IsOpen ) return;
		PlaySound( "itemstore.open" );
		IDialog.Activate( this );
		IsOpen = true;
	}

	public void Close()
	{
		if ( !IsOpen ) return;
		IDialog.Deactivate( this );
		IsOpen = false;
	}

	public void Populate( RealTimeUntil nextRoundTime, Team winningTeam )
	{
		TimeUntilNextRound = nextRoundTime;
		CoresDestroyedList.DeleteChildren( true );
		MostKillsList.DeleteChildren( true );

		WinningTeam.Text = $"{winningTeam.ToString().ToUpper()} TEAM WINS";
		WinningTeam.Style.FontColor = winningTeam.GetColor();

        var allValidClients = Client.All.Where( c => c.Pawn is CoreWars.Player player && player.Team != Team.None );
		var clientsByKills = allValidClients.ToList();
		clientsByKills.Sort( ( a, b ) => a.GetInt( "kills" ).CompareTo( b.GetInt( "kills" ) ) );

		var clientsByCoresDestroyed = allValidClients.ToList();
		clientsByCoresDestroyed.Sort( ( a, b ) => a.GetInt( "cores" ).CompareTo( b.GetInt( "cores" ) ) );

		for ( var i = 0; i < 4; i++ )
		{
			if ( clientsByKills.Count > i )
				AddRow( MostKillsList, clientsByKills[i], clientsByKills[i].GetInt( "kills" ) );
			else
				AddEmptyRow( MostKillsList );

			if ( clientsByCoresDestroyed.Count > i )
				AddRow( CoresDestroyedList, clientsByCoresDestroyed[i], clientsByCoresDestroyed[i].GetInt( "cores" ) );
			else
				AddEmptyRow( CoresDestroyedList );
		}
	}

	protected override void PostTemplateApplied()
	{
		base.PostTemplateApplied();

		BindClass( "hidden", () => !IsOpen );
	}

	private void AddEmptyRow( Panel parent )
	{
		var row = parent.AddChild<Panel>( "player" );
		row.AddChild<Panel>( "avatar" );
		row.Add.Label( string.Empty, "username" );
		row.Add.Label( string.Empty, "score" );
	}

	private void AddRow( Panel parent, Client client, int score )
	{
		var row = parent.AddChild<Panel>( "player" );
		var avatar = row.AddChild<Panel>( "avatar" );
		avatar.Style.SetBackgroundImage( $"avatar:{client.SteamId}" );
		row.Add.Label( client.Name, "username" );
		row.Add.Label( score.ToString(), "score" );
	}
}
