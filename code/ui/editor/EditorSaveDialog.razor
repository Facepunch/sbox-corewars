@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Facepunch.Voxels;
@using Sandbox.UI.Construct;
@using System.Linq;

@namespace Facepunch.CoreWars.Editor
@attribute [StyleSheet( "/ui/editor/EditorSaveDialog.scss" )]
@inherits Panel

<root>
    <div class="modal">
        <label class="title">Save World</label>
        <div class="container">
            <AutoCompleteInput @ref="Input" class="input">maps/map.voxels</AutoCompleteInput>
            <AutoCompleteList @ref="Suggestions"></AutoCompleteList>
        </div>
    </div>
</root>

@code
{
	private static EditorSaveDialog Current { get; set; }

	public AutoCompleteInput Input { get; set; }
	public AutoCompleteList Suggestions { get; set; }

	public static void Open()
	{
		Current?.Delete();
		Current = new EditorSaveDialog();

		Game.RootPanel.AddChild( Current );
	}

	public override void Tick()
	{
		if ( !VoxelWorld.Current.IsValid() ) return;

		base.Tick();
	}

	protected virtual void HandleSubmit()
	{
        CoreWarsGame.SaveEditorMapCmd( Input.Text );
	}

	protected virtual void HandleClose()
	{
		Delete();
	}

    protected override void OnAfterTreeRender( bool firstTime )
    {
        base.OnAfterTreeRender( firstTime );

		Input.AutoCompleteHandler = DoAutoComplete;
		Input.AutoCompleteList = Suggestions;

        var state = CoreWarsGame.GetStateAs<EditorState>();

		if ( !string.IsNullOrEmpty( state.CurrentFileName ) )
		{
			Input.Text = state.CurrentFileName.Replace( "worlds/", "" ).Replace( ".voxels", "" );
			Input.CaretPosition = Input.TextLength;
		}

		Input.Focus();
		Input.AddEventListener( "onsubmit", () => HandleSubmit() );
		Input.AddEventListener( "onblur", () => HandleClose() );
	}

	private string[] DoAutoComplete( string arg )
	{
		if ( string.IsNullOrEmpty( arg ) ) return null;

		FileSystem.Data.CreateDirectory( "worlds" );

		var files = FileSystem.Data.FindFile( "worlds", "*.voxels" );

		return files
			.Select( f => f.Replace( ".voxels", "" ) )
			.Where( f => f != arg && f.StartsWith( arg ) ).ToArray();
	}
}
