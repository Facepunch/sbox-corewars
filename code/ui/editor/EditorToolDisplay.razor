@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;
@using Facepunch.Voxels;
@using System.Collections.Generic;

@namespace Facepunch.CoreWars.Editor
@attribute [StyleSheet( "/ui/editor/EditorToolDisplay.scss" )]
@inherits Panel

<root>
    <div class="container">
        <div @ref="ToolIcon" class="icon">
        </div>
        <div class="info">
            <label class="name">@ToolName</label>
            <label class="description">@ToolDescription</label>
        </div>
    </div>

    @if ( Hotkeys.Count > 0 )
    {
        <div class="hotkeys">
            <div class="list">
                @foreach ( var kv in Hotkeys )
                {
                    var button = kv.Key;
                    var text = kv.Value;
                    var texture = Input.GetGlyph( button, InputGlyphSize.Small );

                    <div class="item">
                        <img class="glyph" Texture=@texture width=@texture.Width height=@texture.Height />
                        <label class="text">@text</label>
                    </div>
                }
            </div>
        </div>
    }
</root>

@code
{
    public static EditorToolDisplay Current { get; private set; }

    public string ToolName => GetToolName();
    public string ToolDescription => GetToolDescription();
    public Panel ToolIcon { get; set; }
    public Dictionary<InputButton, string> Hotkeys { get; private set; } = new();

    public EditorToolDisplay()
    {
        Current = this;
    }

    private string GetToolName()
    {
        var tool = GetActiveTool();

        if ( tool.IsValid() )
        {
            var description = TypeLibrary.GetAttribute<EditorToolAttribute>( tool.GetType() );
            var title = description.Title;
            var mode = tool.SecondaryMode;

            if ( !string.IsNullOrEmpty( mode ) )
            {
                return $"{title} ({mode})";
            }

            return title;
        }

        return string.Empty;
    }

    private string GetToolDescription()
    {
        var tool = GetActiveTool();

        if ( tool.IsValid() )
        {
            var description = TypeLibrary.GetAttribute<EditorToolAttribute>( tool.GetType() );
            return description.Description;
        }

        return string.Empty;
    }

    public EditorTool GetActiveTool()
    {
        if ( Game.LocalPawn is EditorPlayer player )
        {
            if ( player.Tool.IsValid() )
            {
                return player.Tool;
            }
        }

        return default;
    }

    public override void Tick()
    {
        if ( !VoxelWorld.Current.IsValid() ) return;

        var tool = GetActiveTool();

        if ( tool.IsValid() )
        {
            var description = TypeLibrary.GetType( tool.GetType() );
            ToolIcon.Style.SetBackgroundImage( description.Icon );
        }

        base.Tick();
    }

    public void ClearHotkeys()
    {
        Hotkeys.Clear();
    }

    public void AddHotkey( InputButton button, string text )
    {
        Hotkeys[button] = text;
    }

    private bool IsHidden()
    {
        if ( !VoxelWorld.Current.IsValid() )
            return true;

        if ( Game.LocalPawn is EditorPlayer player )
        {
            if ( player.Tool.IsValid() )
            {
                return false;
            }
        }

        return true;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( ToolName, ToolDescription, Hotkeys.Count );
    }

    protected override void OnParametersSet()
    {
		BindClass( "hidden", () => IsHidden() );

        base.OnParametersSet();
    }
}
