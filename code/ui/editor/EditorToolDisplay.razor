@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;
@using Facepunch.Voxels;

@namespace Facepunch.CoreWars.Editor
@attribute [StyleSheet( "/ui/editor/EditorToolDisplay.scss" )]
@inherits Panel

<root>
    <div class="container">
        <div @ref="ToolIcon" class="icon">
        </div>
        <div class="info">
            <label @text="ToolName" class="name"></label>
            <label @text="ToolDescription" class="description"></label>
        </div>
    </div>

    <div class="hotkeys">
        <div @ref="HotkeyList" class="list">
        </div>
    </div>
</root>


@code
{
	public static EditorToolDisplay Current { get; private set; }

	public string ToolName => GetToolName();
	public string ToolDescription => GetToolDescription();
	public Panel HotkeyList { get; set; }
	public Panel ToolIcon { get; set; }

	public EditorToolDisplay()
	{
		Current = this;
	}

	private string GetToolName()
	{
		var tool = GetActiveTool();

		if ( tool.IsValid() )
		{
			var description = TypeLibrary.GetAttribute<EditorToolAttribute>( tool.GetType() );
			var title = description.Title;
			var mode = tool.SecondaryMode;

			if ( !string.IsNullOrEmpty( mode ) )
			{
				return $"{title} ({mode})";
			}

			return title;
		}

		return string.Empty;
	}

	private string GetToolDescription()
	{
		var tool = GetActiveTool();

		if ( tool.IsValid() )
		{
			var description = TypeLibrary.GetAttribute<EditorToolAttribute>( tool.GetType() );
			return description.Description;
		}

		return string.Empty;
	}

	public EditorTool GetActiveTool()
	{
		if ( Local.Pawn is EditorPlayer player )
		{
			if ( player.Tool.IsValid() )
			{
				return player.Tool;
			}
		}

		return default;
	}

	public override void Tick()
	{
		if ( !VoxelWorld.Current.IsValid() ) return;

		var tool = GetActiveTool();

		if ( tool.IsValid() )
		{
			var description = TypeLibrary.GetDescription( tool.GetType() );
			ToolIcon.Style.SetBackgroundImage( description.Icon );
		}

		base.Tick();
	}

	public void ClearHotkeys()
	{
		HotkeyList.DeleteChildren( true );
	}

	public void AddHotkey( InputButton button, string text )
	{
		var panel = new Panel();
		panel.AddClass( "item" );

		var glyph = panel.Add.Image( "", "glyph" );
		glyph.Texture = Input.GetGlyph( button, InputGlyphSize.Small );
		glyph.Style.Width = glyph.Texture.Width;
		glyph.Style.Height = glyph.Texture.Height;

		panel.Add.Label( text, "text" );

		HotkeyList.AddChild( panel );
	}

	private bool IsHidden()
	{
		if ( !VoxelWorld.Current.IsValid() )
			return true;

		if ( Local.Pawn is EditorPlayer player )
		{
			if ( player.Tool.IsValid() )
			{
				return false;
			}
		}

		return true;
	}

    protected override void OnAfterTreeRender( bool firstTime )
    {
        base.OnAfterTreeRender( firstTime );

		HotkeyList.Parent.BindClass( "hidden", () => HotkeyList.ChildrenCount == 0 );
		BindClass( "hidden", () => IsHidden() );
	}
}
