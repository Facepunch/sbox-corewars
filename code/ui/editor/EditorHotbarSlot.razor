@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;
@using Facepunch.Voxels;
@using Facepunch.CoreWars.UI;
@using Facepunch.CoreWars.Utility;
@using System.Collections.Generic;

@namespace Facepunch.CoreWars.Editor
@attribute [StyleSheet( "/ui/editor/EditorHotbarSlot.scss" )]
@inherits Panel
@implements ITooltipProvider
@implements IDroppable

<root>
    <div class="key-number @(Slot < 0 ? "hidden" : "")">
        <label>@(Slot + 1)</label>
    </div>
</root>

@code
{
    public ushort Slot { get; set; }
    public byte BlockId { get; set; }
    public bool IsSelected { get; set; }
    public BlockType BlockType { get; set; }

    public string Description => BlockType.Description;
    public IReadOnlySet<string> Tags { get; set; }
    public string Name => BlockType.FriendlyName;
    public Color Color => Color.White;

    public EditorHotbarSlot() { }

    protected override void OnParametersSet()
    {
        BlockType = VoxelWorld.Current.GetBlockType( BlockId );
        Tags = BlockType.GetItemTags();

        var icon = $"textures/blocks/corewars/color/{BlockType.DefaultTexture}.png";

        if ( !string.IsNullOrEmpty( BlockType.Icon ) )
            icon = BlockType.Icon;

        if ( !string.IsNullOrEmpty(icon) )
        {
            if ( CoreWars.Util.FileExistsCached( icon ) )
            {
                Style.SetBackgroundImage( icon );
                Style.BackgroundSizeX = Length.Cover;
                Style.BackgroundSizeY = Length.Cover;
                Style.BackgroundTint = BlockType.TintColor;
            }
        }
        else
        {
            Style.BackgroundImage = null;
        }

        BindClass( "selected", () => IsSelected );

        base.OnParametersSet();
    }

    public bool CanDrop( IDraggable draggable, DraggableMode mode )
    {
        return draggable is EditorBlockItem;
    }

    public void OnDrop( IDraggable draggable, DraggableMode mode )
    {
        if ( draggable is EditorBlockItem item )
        {
            EditorPlayer.SetHotbarBlockId( Slot, (int)item.BlockId );
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( BlockType, BlockId, Tags, IsSelected );
    }

    protected override void OnMouseOver( MousePanelEvent e )
    {
		if ( BlockType.IsValid() )
		{
			CustomTooltip.Show( this );
		}

		base.OnMouseOver( e );
	}

	protected override void OnMouseOut( MousePanelEvent e )
	{
		CustomTooltip.Hide( this );
		base.OnMouseOut( e );
	}
}
