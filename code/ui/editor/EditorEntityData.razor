@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;
@using Facepunch.Voxels;
@using Facepunch.CoreWars.UI;
@using System.Collections.Generic;

@namespace Facepunch.CoreWars.Editor
@attribute [StyleSheet( "/ui/editor/EditorEntityData.scss" )]
@inherits Panel

<root>
    <div class="modal">
        <label @text="Title"class="title">Entity</label>

        <SimpleForm @ref="PropertyForm">

        </SimpleForm>
    </div>
</root>

@code
{
	private static object ConvertPropertyValue( PropertyDescription property, string value )
	{
		object convertedValue;

		if ( property.PropertyType.IsEnum )
			convertedValue = Enum.Parse( property.PropertyType, value );
		else if ( property.PropertyType == typeof( float ) )
			convertedValue = Convert.ToSingle( value );
		else if ( property.PropertyType == typeof( int ) )
			convertedValue = Convert.ToInt32( value );
		else if ( property.PropertyType == typeof( bool ) )
			convertedValue = Convert.ToBoolean( value );
		else
			convertedValue = value;

		return convertedValue;
	}

	public static EditorEntityData Current { get; private set; }

	public SimpleForm PropertyForm { get; set; }
	public string Title => Entity.GetType().Name;
	public ISourceEntity Entity { get; private set; }

	private Dictionary<string, object> ChangedValues { get; set; } = new();

	public static void Open( ISourceEntity entity )
	{
		Current?.Delete();
		Current = new EditorEntityData( entity );
		Current.PopulateItems();

		var popup = Game.RootPanel.FindPopupPanel();
		popup?.AddChild( Current );
	}

	public EditorEntityData( ISourceEntity entity )
	{
		Entity = entity;
	}

	public void PopulateItems()
	{
		PropertyForm.Clear();
		PropertyForm.StartGroup();

		ChangedValues.Clear();

		var properties = TypeLibrary.GetPropertyDescriptions( Entity );

		for ( int i = 0; i < properties.Length; i++ )
		{
			var property = properties[i];

			if ( property.GetCustomAttribute<EditorPropertyAttribute>() == null )
				continue;

			PropertyForm.AddRowWithCallback( property, Entity, PropertyForm.CreateControlFor( property ), ( value ) =>
			{
				ChangedValues[property.Name] = value;
			} );
		}

		PropertyForm.EndGroup();

		var button = PropertyForm.Add.Button( "Save" );
		button.AddClass( "editor-button" );
		button.AddEventListener( "onclick", () => Save() );
	}

	protected virtual void Save()
	{
		foreach ( var kv in ChangedValues )
		{
			SaveEntityKeyValue( Entity.NetworkIdent, kv.Key, kv.Value.ToString() );
		}

		ChangedValues.Clear();

		Delete();
	}
}
