@using System;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.CoreWars;
@using Sandbox.UI.Construct;

@namespace Facepunch.CoreWars.UI
@attribute [StyleSheet( "/ui/respawnscreen/RespawnKillerInfo.scss" )]
@inherits Panel

<root>
    <div class="respawn-box team-box player-name">
        <div class="respawn-header">
            <label>Killed By</label>
        </div>
        <div class="respawn-body">
            <img src=@Icon class="avatar" />
            <label @ref="KillerNameLabel">@KillerName</label>
        </div>
    </div>

    <div class="respawn-box team-box weapon">
        <div class="respawn-header">
            <label>Using</label>
        </div>
        <div class="respawn-body">
            <label @ref="WeaponNameLabel">@WeaponName</label>
        </div>
    </div>
</root>


@code
{
    public string Icon { get; set; }
    public string KillerName { get; set; }
    public string WeaponName { get; set; }
    public Label KillerNameLabel { get; set; }
    public Label WeaponNameLabel { get; set; }
    public Color KillerNameColor { get; set; }
    public Color WeaponNameColor { get; set; }

    private Team CurrentTeam { get; set; }

    public void SetVisible( bool isVisible )
    {
        SetClass( "hidden", !isVisible );
    }

    public void Update( CoreWarsPlayer player )
    {
        Icon = $"avatar:{player.Client.SteamId}";
        KillerNameColor = player.Team.GetColor().Darken( 0.4f );
        KillerName = player.Client.Name;
        SetTeam( player.Team );
    }

    public void Update( IKillFeedInfo killer )
    {
        Icon = killer.KillFeedIcon;
        KillerNameColor = killer.KillFeedTeam.GetColor().Darken( 0.4f );
        KillerName = killer.KillFeedName;
        SetTeam( killer.KillFeedTeam );
    }

    public void Update( string killerName )
    {
        Icon = "textures/ui/skull.png";
        KillerNameColor = Team.None.GetColor().Darken( 0.4f );
        KillerName = killerName;
        SetTeam( Team.None );
    }

    public void SetTeam( Team team )
    {
        SetClass( CurrentTeam.GetHudClass(), false );
        SetClass( team.GetHudClass(), true );
        CurrentTeam = team;
    }

    public void SetWeapon( Entity weapon )
    {
        if ( weapon.IsValid() && !weapon.IsWorld )
        {
            SetClass( "has-weapon", true );

            WeaponNameColor = CurrentTeam.GetColor().Darken( 0.4f );

            if ( weapon is IKillFeedInfo feedInfo )
                WeaponName = feedInfo.KillFeedName;
            else if ( weapon is Weapon typed && typed.Item.IsValid() )
                WeaponName = typed.Item.Value.Name;
            else
                WeaponName = weapon.Name;
        }
        else
        {
            SetClass( "has-weapon", false );
        }
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        WeaponNameLabel.Style.FontColor = WeaponNameColor;
        KillerNameLabel.Style.FontColor = KillerNameColor;

        base.OnAfterTreeRender( firstTime );
    }


    protected override int BuildHash()
    {
        return HashCode.Combine( WeaponName, KillerName, Icon );
    }
}
